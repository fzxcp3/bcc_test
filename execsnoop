from __future__ import print_function
from bcc import BPF
from bcc.utils import ArgString, printb
import bcc.utils as utils
import argparse
import ctypes as ct
import re
import time
from collections import defaultdict

bpf_text = """
#include <uapi/linux/ptrace.h>
#include <linux/sched.h>
#include <linux/fs.h>
#include <net/sock.h>

#define ARGSIZE  128
enum event_type {
    EVENT_ARG,
    EVENT_RET,
};
typedef struct{
    u32 pid;
    u32 ppid;
    char comm[TASK_COMM_LEN];
    enum event_type type;
    char argv[ARGSIZE];
    int retval;
}exec_data_t;

typedef struct{
    u32 pid;
    u32 uid;
    int retval;
    u32 saddr;
    u32 daddr;
    u16 dport;
    char comm[TASK_COMM_LEN];
}connect_data_t;


struct data_output {
    exec_data_t exec_data;
    connect_data_t connect_data;
};



BPF_PERF_OUTPUT(events);
static int __submit_arg(struct pt_regs *ctx, void *ptr, struct data_output *data)
{
    bpf_probe_read(data->exec_data.argv, sizeof(data->exec_data.argv), ptr);
    events.perf_submit(ctx, data, sizeof(struct data_output));
    return 1;
}
static int submit_arg(struct pt_regs *ctx, void *ptr, struct data_output *data)
{
    const char *argp = NULL;
    bpf_probe_read(&argp, sizeof(argp), ptr);
    if (argp) {
        return __submit_arg(ctx, (void *)(argp), data);
    }
    return 0;
}
int syscall__execve(struct pt_regs *ctx,
    const char __user *filename,
    const char __user *const __user *__argv,
    const char __user *const __user *__envp)
{
    struct data_output data = {};

    struct task_struct *task;
    data.exec_data.pid = bpf_get_current_pid_tgid() >> 32;
    task = (struct task_struct *)bpf_get_current_task();
    data.exec_data.ppid = task->real_parent->tgid;
    bpf_get_current_comm(&data.exec_data.comm, sizeof(data.exec_data.comm));
    data.exec_data.type = EVENT_ARG;
    __submit_arg(ctx, (void *)filename, &data);
    #pragma unroll
    for (int i = 1; i < MAXARG; i++) {
        if (submit_arg(ctx, (void *)&__argv[i], &data) == 0)
             goto out;
    }
    char ellipsis[] = "...";
    __submit_arg(ctx, (void *)ellipsis, &data);
out:
    return 0;
}
int do_ret_sys_execve(struct pt_regs *ctx)
{
    struct data_output data = {};

    struct task_struct *task;
    data.exec_data.pid = bpf_get_current_pid_tgid() >> 32;
    task = (struct task_struct *)bpf_get_current_task();
    data.exec_data.ppid = task->real_parent->tgid;
    bpf_get_current_comm(&data.exec_data.comm, sizeof(data.exec_data.comm));
    data.exec_data.type = EVENT_RET;
    data.exec_data.retval = PT_REGS_RC(ctx);
    events.perf_submit(ctx, &data, sizeof(data));
    return 0;
}


BPF_HASH(currsock, u32, struct sock *);
struct ipv4_data_t {
    u64 ts_us;
    u32 pid;
    u32 uid;
    u32 saddr;
    u32 daddr;
    u64 ip;
    u16 dport;
    char task[TASK_COMM_LEN];
};
struct ipv6_data_t {
    u64 ts_us;
    u32 pid;
    u32 uid;
    unsigned __int128 saddr;
    unsigned __int128 daddr;
    u64 ip;
    u16 dport;
    char task[TASK_COMM_LEN];
};

struct ipv4_flow_key_t {
    u32 saddr;
    u32 daddr;
    u16 dport;
};

struct ipv6_flow_key_t {
    unsigned __int128 saddr;
    unsigned __int128 daddr;
    u16 dport;
};

int trace_connect_entry(struct pt_regs *ctx, struct sock *sk)
{
    u64 pid_tgid = bpf_get_current_pid_tgid();
    u32 pid = pid_tgid >> 32;
    u32 tid = pid_tgid;
    u32 uid = bpf_get_current_uid_gid();
    currsock.update(&tid, &sk);
    return 0;
};

static int trace_connect_return(struct pt_regs *ctx, short ipver)
{
    struct data_output data = {};
    int ret = PT_REGS_RC(ctx);
    u64 pid_tgid = bpf_get_current_pid_tgid();
    u32 pid = pid_tgid >> 32;
    u32 tid = pid_tgid;
    struct sock **skpp;
    skpp = currsock.lookup(&tid);
    if (skpp == 0) {
        return 0;
    }
    if (ret != 0) {
        currsock.delete(&tid);
        return 0;
    }
    struct sock *skp = *skpp;
    u16 dport = skp->__sk_common.skc_dport;


    if (ipver == 4) {
        data.connect_data.uid = bpf_get_current_uid_gid();
        data.connect_data.saddr = skp->__sk_common.skc_rcv_saddr;
        data.connect_data.daddr = skp->__sk_common.skc_daddr;
        data.connect_data.dport = ntohs(dport);
        bpf_get_current_comm(&data.connect_data.comm, sizeof(data.connect_data.comm));
        events.perf_submit(ctx, &data, sizeof(data));
    } 
    currsock.delete(&tid);
    return 0;
}

int trace_connect_v4_return(struct pt_regs *ctx)
{
    return trace_connect_return(ctx, 4);
}
int trace_connect_v6_return(struct pt_regs *ctx)
{
    return trace_connect_return(ctx, 6);
}

"""
bpf_text = bpf_text.replace("MAXARG", "20")
b = BPF(text=bpf_text)
execve_fnname = b.get_syscall_fnname("execve")
b.attach_kprobe(event=execve_fnname, fn_name="syscall__execve")
b.attach_kretprobe(event=execve_fnname, fn_name="do_ret_sys_execve")

b.attach_kretprobe(event="tcp_v4_connect", fn_name="trace_connect_entry")



print("%-8s" % ("TIME(s)"), end="")
print("%-16s %-6s %-6s %3s %s" % ("PCOMM", "PID", "PPID", "RET", "ARGS"))
TASK_COMM_LEN = 16      # linux/sched.h
ARGSIZE = 128           # should match #define in C above

class Exec_data(ct.Structure):
    _fields_ = [
        ("pid", ct.c_uint),
        ("ppid", ct.c_uint),
        ("comm", ct.c_char * TASK_COMM_LEN),
        ("type", ct.c_int),
        ("argv", ct.c_char * ARGSIZE),
        ("retval", ct.c_int),
    ]
class Connect_data(ct.Structure):
    _fields_ = [
        ("pid", ct.c_uint),
        ("uid", ct.c_uint),
        ("retval", ct.c_int),
        ("saddr", ct.c_int),
        ("daddr", ct.c_int),
        ("dport", ct.c_short),
        ("comm", ct.c_char * TASK_COMM_LEN)
    ]

class Data(ct.Structure):
    _fields_ = [
        ("exec_data", Exec_data),
        ("connect_data", Connect_data)
    ]



class EventType(object):
    EVENT_ARG = 0
    EVENT_RET = 1
start_ts = time.time()
argv = defaultdict(list)
def get_ppid(pid):
    try:
        with open("/proc/%d/status" % pid) as status:
            for line in status:
                if line.startswith("PPid:"):
                    return int(line.split()[1])
    except IOError:
        pass
    return 0
def print_event(cpu, data, size):
    event = ct.cast(data, ct.POINTER(Data)).contents
    if event.connect_data.pid != 0:
        print(event.connect_data.pid,event.connect_data.uid,event.connect_data.daddr,event.connect_data.dport,event.connect_data.dport,event.connect_data.comm)

b["events"].open_perf_buffer(print_event)
while 1:
    try:
        b.perf_buffer_poll()
    except KeyboardInterrupt:
        exit()



